//Autor: Acosta Osorio Christian
// C code to demonstrate Divide and
// Conquer Algorithm
#include <stdio.h>
#include <stdlib.h>

int DAC_Max(int a[], int index, int l);
int DAC_Min(int a[], int index, int l);

// Function to find the maximum number
// in a given array.
int DAC_Max(int a[], int index, int l)
{
    int max;
    if (l - 1 == 0)
    {
        return a[index];
    }
    if (index >= l - 2)
    {
        if (a[index] > a[index + 1])
            return a[index];
        else
            return a[index + 1];
    }

    // Logic to find the maximum element
    // in the given array.
    max = DAC_Max(a, index + 1, l);

    if (a[index] > max)
        return a[index];
    else
        return max;
}

// Function to find the minimum number
// in a given array.
int DAC_Min(int a[], int index, int l)
{
    int min;
    if (l - 1 == 0)
    {
        return a[index];
    }
    if (index >= l - 2)
    {
        if (a[index] < a[index + 1])
            return a[index];
        else
            return a[index + 1];
    }

    // Logic to find the minimum element
    // in the given array.
    min = DAC_Min(a, index + 1, l);

    if (a[index] < min)
        return a[index];
    else
        return min;
}

// Driver Code
int main()
{
    // Defining the variables
    int min, max, N;

    //Arreglo de 10,000 elementos
    const int tam = 10000;
    int* a = (int*)malloc(tam * sizeof(int));
    for (int i = 0; i < tam; i++)
    {
        a[i] = rand() % 10000;
    }

    // Recursion - DAC_Max function called
    max = DAC_Max(a, 0, tam);

    // Recursion - DAC_Min function called
    min = DAC_Min(a, 0, tam);
    printf("The minimum number in the given array is: %d\n", min);
    printf("The maximum number in the given array is: %d", max);

    // Free the dynamically allocated memory
    free(a);

    return 0;
}
